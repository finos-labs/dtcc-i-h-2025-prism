import React, { useState, useEffect, useCallback } from "react";
import {
  Edit,
  Save,
  UserCircle,
  Briefcase,
  Zap,
  Clock,
  Activity,
  Target,
  Layers,
  CheckCircle,
  X,
} from "lucide-react";
import { supabase } from "../lib/supabase";
import { useAuth } from "../contexts/AuthContext";
import { motion, AnimatePresence } from "framer-motion";

interface UserProfile {
  user_id: string;
  project_count: number;
  firsttimeuserstatus: boolean;
  question_1: string;
  question_2: string;
  question_3: string;
  question_4: string;
  question_5: string;
  question_6: string;
  created_at?: string; // Optional since it may be generated by the database
}

const ProfilePage: React.FC = () => {
  const { user } = useAuth();
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [editedProfile, setEditedProfile] = useState<UserProfile | null>(null);
  const [showNotification, setShowNotification] = useState(false);
  const [isSaving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Use useCallback to memoize the function
  const fetchUserProfile = useCallback(async () => {
    try {
      if (!user) return;

      setLoading(true);
      setError(null);

      console.log("Fetching profile for user:", user.id);

      // Try directly with select first
      const { data, error: fetchError } = await supabase
        .from("userData")
        .select("*")
        .eq("user_id", user.id)
        .single();

      if (fetchError) {
        console.log(
          "Error fetching profile, attempting to create:",
          fetchError
        );
        if (fetchError.code === "PGRST116") {
          // Profile doesn't exist, create a default one silently
          await createDefaultProfile();
          return; // Return early as createDefaultProfile will set the profile
        } else {
          throw fetchError;
        }
      } else if (data) {
        console.log("Successfully loaded profile:", data);
        setProfile(data);
        setEditedProfile(data);
      } else {
        // No data returned, but no error either - create a profile
        console.log("No profile found despite no error, creating default");
        await createDefaultProfile();
      }
    } catch (err) {
      console.error("Error fetching profile:", err);
      // Don't set error if we're still loading, to avoid showing error and loading at the same time
      if (!loading) {
        setError("Failed to load profile data. Please refresh the page.");
      }
    } finally {
      setLoading(false);
    }
  }, [user]);

  useEffect(() => {
    if (user) {
      fetchUserProfile();
    }
  }, [user, fetchUserProfile]);

  const createDefaultProfile = async () => {
    try {
      if (!user) return;

      console.log("Creating default profile for user:", user.id);

      const defaultProfile: UserProfile = {
        user_id: user.id,
        project_count: 0,
        firsttimeuserstatus: true,
        question_1: "Not Specified",
        question_2: "Not Specified",
        question_3: "Not Specified",
        question_4: "Not Specified",
        question_5: "Not Specified",
        question_6: "Not Specified",
      };

      // Use upsert to handle both create and update cases
      const { data, error } = await supabase
        .from("userData")
        .upsert(defaultProfile, {
          onConflict: "user_id",
        })
        .select();

      if (error) {
        console.error("Error creating default profile:", error);
        throw error;
      }

      // Set profile with the returned data
      if (data && data.length > 0) {
        console.log("Successfully created default profile:", data[0]);
        setProfile(data[0]);
        setEditedProfile(data[0]);
      } else {
        // Fallback if no data was returned
        console.log(
          "No data returned from create, using default profile object"
        );
        setProfile(defaultProfile as UserProfile);
        setEditedProfile(defaultProfile as UserProfile);
      }
    } catch (err) {
      console.error("Error creating profile:", err);
      setError("Failed to create profile. Please try refreshing the page.");
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!editedProfile || !user) return;

    try {
      setSaving(true);
      setError(null);

      // Make a simple object with just the fields we need, preserving project_count
      const updateData = {
        user_id: user.id,
        project_count: profile?.project_count || 0, // Use the original count, not the edited one
        firsttimeuserstatus: false,
        question_1: editedProfile.question_1,
        question_2: editedProfile.question_2,
        question_3: editedProfile.question_3,
        question_4: editedProfile.question_4,
        question_5: editedProfile.question_5,
        question_6: editedProfile.question_6,
      };

      // Try upsert to handle both insert and update
      const { error } = await supabase.from("userData").upsert(updateData, {
        onConflict: "user_id",
      });

      if (error) {
        console.error("Error upserting profile:", error);
        throw new Error(error.message || "Failed to save profile");
      }

      // Update succeeded
      setProfile({ ...editedProfile, ...updateData } as UserProfile);
      setEditedProfile({ ...editedProfile, ...updateData } as UserProfile);
      setIsEditing(false);
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 3000);
    } catch (err: unknown) {
      console.error("Error in handleSave:", err);
      setError(
        `Failed to save changes: ${
          err instanceof Error ? err.message : "Unknown error"
        }. Please try again.`
      );
    } finally {
      setSaving(false);
    }
  };

  const handleCancel = () => {
    if (profile) {
      setEditedProfile(profile);
    }
    setIsEditing(false);
    setError(null);
  };

  const renderField = (
    label: string,
    field: keyof UserProfile,
    icon: React.ReactNode,
    options: string[]
  ) => {
    // Simplified approach - use only the question fields
    const value = profile?.[field] || "Not Specified";
    const editValue = editedProfile?.[field] || "Not Specified";

    return (
      <motion.div
        className="bg-white/90 backdrop-blur-sm rounded-lg p-6 shadow-lg hover:shadow-xl transition-all duration-200 border border-gray-100"
        whileHover={{ y: -5, scale: 1.02 }}
      >
        <div className="flex items-center gap-3 mb-4">
          <div className="p-2 bg-gradient-to-br from-teal-400 to-teal-600 rounded-full shadow-md">
            {React.cloneElement(icon as React.ReactElement, {
              className: "h-5 w-5 text-white",
            })}
          </div>
          <h3 className="font-medium text-gray-700">{label}</h3>
        </div>
        {isEditing ? (
          <select
            className="w-full p-3 rounded-lg border border-gray-200 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all duration-200"
            value={String(editValue)}
            onChange={(e) => {
              const newValue = e.target.value;

              // Simple direct update
              setEditedProfile((prev) => {
                if (!prev) return null;
                return {
                  ...prev,
                  [field]: newValue,
                };
              });
            }}
          >
            {options.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
        ) : (
          <p
            className={`text-xl font-medium ${
              value === "Not Specified" || value === "Not Answered"
                ? "text-gray-400 italic"
                : "text-gray-900"
            }`}
          >
            {value}
          </p>
        )}
      </motion.div>
    );
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-teal-50 to-emerald-50">
        <div className="animate-spin rounded-full h-12 w-12 border-4 border-teal-500 border-t-transparent"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-teal-50 to-emerald-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-6xl mx-auto">
        <AnimatePresence>
          {(showNotification || error) && (
            <motion.div
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className={`fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
                error
                  ? "bg-red-100 text-red-700 border border-red-300"
                  : "bg-emerald-100 text-emerald-700 border border-emerald-300"
              }`}
            >
              <div className="flex items-center gap-2">
                {error ? (
                  <X className="h-5 w-5" />
                ) : (
                  <CheckCircle className="h-5 w-5" />
                )}
                <span className="font-medium">
                  {error || "Changes saved successfully!"}
                </span>
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() =>
                    error ? setError(null) : setShowNotification(false)
                  }
                  className="ml-2 text-gray-500 hover:text-gray-700"
                >
                  <X className="h-4 w-4" />
                </motion.button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        <div className="mb-10 flex justify-between items-center">
          <h1 className="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-teal-600 to-emerald-600">
            Profile Settings
          </h1>
          <div className="flex gap-3">
            {isEditing && (
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleCancel}
                disabled={isSaving}
                className="px-4 py-2 rounded-lg text-gray-700 bg-white border border-gray-200 hover:bg-gray-50 transition-colors duration-200 disabled:opacity-50 shadow-sm"
              >
                Cancel
              </motion.button>
            )}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => (isEditing ? handleSave() : setIsEditing(true))}
              className={`px-6 py-2 rounded-lg text-white flex items-center gap-2 ${
                isEditing
                  ? "bg-gradient-to-r from-emerald-500 to-teal-500 hover:from-emerald-600 hover:to-teal-600"
                  : "bg-gradient-to-r from-teal-500 to-emerald-600 hover:from-teal-600 hover:to-emerald-700"
              } transition-all duration-300 disabled:opacity-50 shadow-md`}
              disabled={isSaving}
            >
              {isEditing ? (
                <>
                  {isSaving ? (
                    <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent" />
                  ) : (
                    <Save className="h-5 w-5" />
                  )}
                  {isSaving ? "Saving..." : "Save Changes"}
                </>
              ) : (
                <>
                  <Edit className="h-5 w-5" />
                  Edit Profile
                </>
              )}
            </motion.button>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-8 mb-8 border border-gray-100 backdrop-blur-sm bg-white/80">
          <div className="flex items-center gap-6">
            <div className="h-20 w-20 rounded-full bg-gradient-to-br from-teal-500 to-emerald-500 flex items-center justify-center shadow-md">
              <UserCircle className="h-12 w-12 text-white" />
            </div>
            <div>
              <h2 className="text-2xl font-bold text-gray-900">
                {user?.email?.split("@")[0] || "User"}
              </h2>
              <p className="text-gray-500">{user?.email}</p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {/* Profile cards */}
          {renderField(
            "User Type (Question 1)",
            "question_1",
            <UserCircle className="h-5 w-5 text-teal-600" />,
            [
              "Student",
              "Professional",
              "Researcher",
              "Entrepreneur",
              "Hobbyist",
              "Not Specified",
            ]
          )}
          {renderField(
            "AI Proficiency (Question 2)",
            "question_2",
            <Zap className="h-5 w-5 text-emerald-600" />,
            ["Beginner", "Intermediate", "Advanced", "Expert", "Not Specified"]
          )}
          {renderField(
            "Usage Frequency (Question 3)",
            "question_3",
            <Clock className="h-5 w-5 text-teal-600" />,
            [
              "Daily",
              "Several times a week",
              "Weekly",
              "Monthly",
              "Rarely",
              "Not Specified",
            ]
          )}
          {renderField(
            "Usage Context (Question 4)",
            "question_4",
            <Activity className="h-5 w-5 text-emerald-600" />,
            [
              "Personal Interest",
              "Academic",
              "Professional",
              "Research",
              "Not Specified",
            ]
          )}
          {renderField(
            "Primary Goal (Question 5)",
            "question_5",
            <Target className="h-5 w-5 text-teal-600" />,
            [
              "Learning",
              "Productivity",
              "Research",
              "Ensure compliance",
              "Business",
              "Not Specified",
            ]
          )}
          {renderField(
            "Industry Focus (Question 6)",
            "question_6",
            <Briefcase className="h-5 w-5 text-emerald-600" />,
            [
              "Technology",
              "Finance",
              "Healthcare",
              "Education",
              "Government & Public Policy",
              "Other",
              "Not Specified",
            ]
          )}

          {/* Project Count - Always non-editable */}
          <motion.div
            className="bg-white/90 backdrop-blur-sm rounded-lg p-6 shadow-lg hover:shadow-xl transition-all duration-200 border border-gray-100"
            whileHover={{ y: -5, scale: 1.02 }}
          >
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 bg-gradient-to-br from-teal-500 to-emerald-500 rounded-full shadow-md">
                <Layers className="h-5 w-5 text-white" />
              </div>
              <h3 className="font-medium text-gray-700">Projects Created</h3>
            </div>
            <div className="flex items-center">
              <span className="text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-teal-600 to-emerald-600">
                {profile?.project_count || 0}
              </span>
              <span className="ml-2 text-sm text-gray-500">projects</span>
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;